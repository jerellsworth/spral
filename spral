#!/usr/bin/env python3

"""Stupid Python RetroArch Launcher"""

import argparse
import json
import os
import platform
from pathlib import Path
from tkinter import Tk
from tkinter.filedialog import LoadFileDialog
from typing import Any, Callable, Dict, Iterable, Optional, Tuple

WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600

HOME = Path.home()
ROOT = Path(HOME.anchor)
STR_HOME = str(HOME)


def gui_ask_path(
    title: str,
    initialdir: str = STR_HOME,
) -> Path:
    root = Tk()
    root.withdraw()
    lfd = LoadFileDialog(root, title=title)
    lfd.top.geometry(f"{WINDOW_WIDTH}x{WINDOW_HEIGHT}")
    lfd.top.resizable(True, True)
    fname = lfd.go(dir_or_file=initialdir)
    root.destroy()
    root.update_idletasks()
    if fname is None:
        exit()
    return Path(fname)


class Config:

    @staticmethod
    def _find_longest_existing_prefix(p: Path):
        while not p.is_dir():
            p_parent = p.parent
            if p == p_parent:
                return p
            p = p_parent
        return p

    def __init__(self, path: Optional[Path] = None):
        self.path = path or (HOME / ".spral.json")
        self._init_config()

    def _save(self):
        self.path.write_text(json.dumps(self.cfg))

    def _init_config(self):
        if self.path.exists():
            self.cfg = json.loads(self.path.read_text())
            return
        if platform.system() == "Darwin":
            self.cfg = dict(
                general=dict(
                    ra_path=str(
                        ROOT
                        / "Applications"
                        / "RetroArch.app"
                        / "Contents"
                        / "MacOS"
                        / "RetroArch"
                    ),
                    last_core_picked=str(
                        HOME / "Library" / "Application Support" / "RetroArch" / "cores"
                    ),
                    last_rom_picked=str(HOME),
                ),
                matches={},
            )
        else:
            self.cfg = dict(
                general=dict(
                    ra_path=str(ROOT),
                    last_core_picked=str(HOME),
                    last_rom_picked=str(HOME),
                ),
                matches={},
            )
        self._save()

    def get_file_from_cfg(
        self,
        key: str,
        prompt_title: str,
        force: bool = False,
    ) -> Optional[Path]:
        fpath: Optional[Path] = Path(self.cfg["general"].get(key))
        if fpath is None:
            start_dir = self._find_longest_existing_prefix(Path(STR_HOME))
        elif fpath.is_file() and (not force):
            return fpath
        else:
            start_dir = self._find_longest_existing_prefix(fpath)
        fpath = gui_ask_path(
            prompt_title,
            initialdir=start_dir,
        )
        if fpath is None:
            return None
        self.cfg["general"][key] = str(fpath)
        self._save()
        return fpath

    def set_file_from_cfg(self, key: str, file: Path) -> None:
        self.cfg["general"][key] = str(file)
        self._save()

    def get_match(self, key: Any) -> Optional[Path]:
        # key is expected to be (directory, extension)
        p = self.cfg["matches"].get(key)
        if p is None:
            return None
        return Path(p)

    def set_match(self, key: Any, value: Path):
        self.cfg["matches"][key] = str(value)
        self._save()


class App:
    def __init__(self, cfg_path: Optional[Path] = None):
        self.path = cfg_path or (HOME / ".spral.json")
        self.cfg = Config(cfg_path)

    def run(self, rom: Optional[Path], force_pick_core: bool = False):
        if rom is None:
            initialdir = (
                self.cfg.get_file_from_cfg(
                    "last_rom_picked",
                    "Path to Rom",
                )
                or HOME
            ).parent
            rom = gui_ask_path("Path to Rom", str(initialdir))
        elif not rom.is_file():
            rom = gui_ask_path("Path to Rom", str(rom))
        rom_dir = rom.parent
        core_search_key = f"{rom.parent}:{rom.suffix.upper()}"
        if force_pick_core:
            core_path = None
        else:
            core_path = self.cfg.get_match(core_search_key)
        if core_path is None:
            initialdir = (
                self.cfg.get_file_from_cfg(
                    "last_core_picked",
                    "Path to Core",
                )
                or HOME
            ).parent
            core_path = gui_ask_path("Path to Core", str(initialdir))
        ra_path = self.cfg.get_file_from_cfg(
            "ra_path",
            "Path to RetroArch executable",
        )
        self.cfg.set_match(core_search_key, core_path)
        self.cfg.set_file_from_cfg("last_rom_picked", rom)
        self.cfg.set_file_from_cfg("last_core_picked", core_path)
        cmd = f"'{ra_path}' -L '{core_path}' '{rom}'"
        os.system(cmd)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Launch RetroArch")
    parser.add_argument(
        "-c",
        help="Force choice of core",
        action="store_true",
    )
    parser.add_argument("ROM", nargs="?", default=None, type=Path)
    args = parser.parse_args()
    force_pick_core = args.c
    rom = args.ROM
    app = App()
    app.run(rom, force_pick_core)
