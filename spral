#!/usr/bin/env python3

"""Stupid Python RetroArch Launcher"""

import argparse
import json
import os
import platform
from pathlib import Path
from tkinter import Tk
from tkinter.filedialog import LoadFileDialog
from typing import Any, Callable, Dict, Iterable, Optional, Tuple

HOME = Path.home()
STR_HOME = str(HOME)


def gui_ask_path(
        title: str,
        initialdir: str = STR_HOME,
        ) -> Path:
    root = Tk()
    root.withdraw()
    lfd = LoadFileDialog(root, title=title)
    fname = lfd.go(dir_or_file=initialdir)
    root.destroy()
    root.update_idletasks()
    return Path(fname)


class Config:
    PATH = HOME / ".spral.json"

    @staticmethod
    def _find_longest_existing_prefix(p: Path):
        while not p.is_dir():
            p_parent = p.parent
            if p == p_parent:
                return p
            p = p_parent
        return p

    @classmethod
    def _init_config_if_not_exists(cls):
        if cls.PATH.exists():
            return
        root = Path(HOME.anchor)
        if platform.system() == "Darwin":
            seed = dict(
                general=dict(
                    ra_path=str(root / "Applications" / "RetroArch.app" / "Contents" / "MacOS" / "RetroArch"),
                    last_core_picked=str(HOME / "Library" / "Application Support" / "RetroArch" / "cores"),
                    last_rom_picked=str(HOME),
                )
            )
        else:
            seed = dict(
                general=dict(
                    ra_path=str(root),
                    last_core_picked=str(HOME),
                    last_rom_picked=str(HOME),
                )
            )
        cls.PATH.write_text(json.dumps(seed))
    
    @classmethod
    def get_conf(cls, key: [Iterable[str]]) -> str:
        cls._init_config_if_not_exists()
        cfg = json.loads(cls.PATH.read_text())
        for k in key:
            cfg = cfg[k]
        assert isinstance(cfg, str)
        return cfg

    @classmethod
    def set_conf(cls, key: Iterable[str], val: str):
        cls._init_config_if_not_exists()
        cfg = json.loads(cls.PATH.read_text())
        cfg_root = cfg
        for k in key[:-1]:
            try:
                cfg = cfg[k]
            except KeyError:
                new_cfg = {}
                cfg[k] = new_cfg
                cfg = new_cfg
        cfg[key[-1]] = val
        cls.PATH.write_text(json.dumps(cfg_root, indent=2))

    @classmethod
    def prompt_if_not_exists(
        cls,
        key: Iterable[str],
        title: str,
        initialdir: str = STR_HOME,
        force_parent = False,
        ) -> Tuple[Path, bool]:
        """
        Return value is (path, had_to_prompt)
        """
        try:
            p = Path(cls.get_conf(key))
            if (not force_parent) and p.is_file():
                return p, False
            initialdir = cls._find_longest_existing_prefix(p)
        except KeyError:
            initialdir = cls._find_longest_existing_prefix(Path(initialdir))
        p = gui_ask_path(
            title,
            initialdir=initialdir,
            )
        cls.set_conf(key, str(p))
        return p, True


def pick_core(force: bool, rom: Path) -> Path:
    core, had_to_prompt = Config.prompt_if_not_exists(
            ["general", "last_core_picked"],
            title="Path to core",
            )
    str_rom_parent = str(rom.parent)
    if had_to_prompt:
        Config.set_conf(["default_cores", str_rom_parent], str(core))
        return core    
    core, _ = Config.prompt_if_not_exists(
        ["default_cores", str_rom_parent],
        "Path to core",
        initialdir=core,
        force_parent=force,
        )
    return core


if __name__ == '__main__':
    ra_path, _ = Config.prompt_if_not_exists(
        ["general", "ra_path"],
        title="Path to RetroArch Executable",
        )
    parser = argparse.ArgumentParser(description="Launch RetroArch")
    parser.add_argument("-c", help="Force choice of core", action="store_true")
    parser.add_argument("ROM", nargs="?", default=None, type=Path)
    args = parser.parse_args()
    force_pick_core = args.c
    rom = args.ROM

    if rom is None:
        rom, _ = Config.prompt_if_not_exists(
            ["general", "last_rom_picked"],
            title="ROM",
            force_parent=True,
            )

    core = pick_core(force_pick_core, rom)
    cmd = f"'{ra_path}' -L '{core}' '{rom}'"

    os.system(cmd)
