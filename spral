#!/usr/bin/env python3

"""Stupid Python RetroArch Launcher"""

import json
import os
import platform
from pathlib import Path
from typing import Any, Callable, Dict, Iterable, Optional, Tuple

from gooey import GooeyParser
from gooey import Gooey, GooeyParser, Events

WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600

HOME = Path.home()
ROOT = Path(HOME.anchor)
STR_HOME = str(HOME)

class Config:

    @staticmethod
    def _find_longest_existing_prefix(p: Path):
        while not p.is_dir():
            p_parent = p.parent
            if p == p_parent:
                return p
            p = p_parent
        return p

    def __init__(self, path: Optional[Path] = None):
        self.path = path or (HOME / ".spral.json")
        self._init_config()

    def _save(self):
        self.path.write_text(json.dumps(self.cfg))

    def _init_config(self):
        if self.path.exists():
            self.cfg = json.loads(self.path.read_text())
            return
        if platform.system() == "Darwin":
            self.cfg = dict(
                general=dict(
                    ra_path=str(
                        ROOT
                        / "Applications"
                        / "RetroArch.app"
                        / "Contents"
                        / "MacOS"
                        / "RetroArch"
                    ),
                    last_core_picked=str(
                        HOME / "Library" / "Application Support" / "RetroArch" / "cores"
                    ),
                    last_rom_picked=str(HOME),
                ),
                matches={},
            )
        else:
            self.cfg = dict(
                general=dict(
                    ra_path=str(ROOT),
                    last_core_picked=str(HOME),
                    last_rom_picked=str(HOME),
                ),
                matches={},
            )
        self._save()

    def set_general_path(self, key: str, file: Path) -> None:
        self.cfg["general"][key] = str(file)
        self._save()

    def get_general_path(self, key: str) -> Optional[Path]:
        p = self.cfg["general"].get(key)
        if p is None:
            return None
        return Path(p)

    def set_match(self, key: Any, value: Path):
        self.cfg["matches"][key] = str(value)
        self._save()

    def get_match(self, key: Any) -> Optional[Path]:
        # key is expected to be (directory, extension)
        p = self.cfg["matches"].get(key)
        if p is None:
            return None
        return Path(p)



@Gooey(use_events=[Events.VALIDATE_FORM])
def main():
    cfg = Config()
    parser = GooeyParser(description="Launch RetroArch")
    parser.add_argument(
        'ra_path',
        type=lambda f: f.is_file(),
        default=cfg.get_match('ra_path'),
        )

if __name__ == "__main__":
    main()
